"""
Django settings for panda project.

Generated by 'django-admin startproject' using Django 1.8.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from django.utils.translation import ugettext_lazy as _


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    'SECRET_KEY', 'r04=z95t^(mcw_9ahqtjkb=h(qflaadvow=kuh#-vl8g$qt4e+')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('ENV', False)

ALLOWED_HOSTS = [
    ".apipanda.com",
    ".panda.dev"
]
INTERNAL_IPS = (
    '127.0.0.1',
    '104.196.59.185'
)

HOST = 'apipanda.com'
SITE_ID = 1

ADMINS = [
    ('Bernard', 'bernardojengwa@gmail.com'),
]
MANAGERS = [
    ('Bernard', 'bernardojengwa@gmail.com'),
]

DEFAULT_FROM_EMAIL = 'bernard@apipanda.com'
SERVER_EMAIL = 'server@apipanda.com'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

if not DEBUG:
    ROOT_URLCONF = 'panda.urls.client'
    DEFAULT_URL_SCHEME = 'https'
    DATABASES = {
        'default': {
            'ENGINE': 'tenant_schemas.postgresql_backend',
            'HOST': os.getenv('DB_HOST'),
            'NAME': os.getenv('DB_NAME'),
            'PORT': os.getenv('DB_PORT'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASS')
        }
    }
else:
    ROOT_URLCONF = 'panda.urls.admin'
    DEFAULT_URL_SCHEME = 'http'
    DATABASES = {
        'default': {
            'ENGINE': 'tenant_schemas.postgresql_backend',
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'NAME': os.getenv('DB_NAME', 'panda'),
            'PORT': os.getenv('DB_PORT', 5433),
            'USER': os.getenv('DB_USER', 'postgres'),
            'PASSWORD': os.getenv('DB_PASS', '[]')
        }
    }

DATABASE_ROUTERS = (
    'tenant_schemas.routers.TenantSyncRouter',
)


MIDDLEWARE_CLASSES = (
    'panda.middleware.SubdomainMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'subdomains.middleware.SubdomainURLRoutingMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'request.middleware.RequestMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'experiments.middleware.ExperimentsRetentionMiddleware',
)


# Application definition

SHARED_APPS = (
    'tenant_schemas',
    'workspace',
    'app',

    'django.contrib.contenttypes',

    'jet.dashboard',
    'jet',
    'django.contrib.admin',
    'django.contrib.humanize',
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'experiments',
    'tastypie',
    'jsonfield',
    'jsonfield2',
    'django_ace',
    'request',
    'django_extensions',
    'subdomains',
    'endpoint',
    # 'permissionsx',
    # 'pipeline',
    'redis',
    'plugin',

    'kong_admin',
)

TENANT_APPS = (
    'django.contrib.contenttypes',
    'private'
)

INSTALLED_APPS = list(
    SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

TENANT_MODEL = 'app.Client'
PUBLIC_SCHEMA_NAME = 'public'


# PUBLIC_SCHEMA_URLCONF = 'panda.urls.client'

SUBDOMAIN_URLCONFS = {
    None: 'panda.urls.admin',
    'www': 'panda.urls.admin',
    'api': 'panda.urls.api',
    'admin': 'panda.urls.admin'
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'public/app/views'),
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ]
        },
    },
]

FILE_UPLOAD_HANDLERS = (
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
)

WSGI_APPLICATION = 'panda.wsgi.application'

SECURE_HSTS_INCLUDE_SUBDOMAINS = True

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/10",
        'KEY_PREFIX': 'APIPANDA_CACHE',
        'KEY_FUNCTION': 'tenant_schemas.cache.make_key',
        'REVERSE_KEY_FUNCTION': 'tenant_schemas.cache.reverse_key',
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Authntication Backends
AUTHENTICATION_BACKENDS = (
    "app.backends.AuthBackend",
)

LOGIN_URL = '/login'
LOGIN_REDIRECT_URL = '/dashboard'
LOGOUT_URL = '/'

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# Email Backends
if not DEBUG:
    EMAIL_BACKEND = 'django_mailgun.MailgunBackend'
    MAILGUN_ACCESS_KEY = 'key-03d06075b2acaafcab7ca62a5f05ab72'
    MAILGUN_SERVER_NAME = 'mg.apipanda.com'
    CSRF_COOKIE_DOMAIN = '.apipanda.com'
    CSRF_TRUSTED_ORIGINS = [
        '.apipanda.com',
    ]

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_COOKIE_NAME = 'apipanda_language'
LANGUAGES = [
    ('en', _('English')),
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "public/site"),
    os.path.join(BASE_DIR, "public/app"),
    os.path.join(BASE_DIR, "bower_components")
)

# STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # 'pipeline.finders.PipelineFinder',
)

STATIC_URL = '/assets/'
STATIC_ROOT = os.path.join(BASE_DIR, "public")

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "uploads")
PYDENTICON_FORMAT = 'png'

# PIPELINE = {
#     'STYLESHEETS': {
#         'group': {
#             'source_filenames': (
#                 'styles/*.css',
#             ),
#             'output_filename': 'styles/main.css',
#             'extra_context': {
#                 'media': 'screen,projection',
#             },
#         },
#     },
#     'JAVASCRIPT': {
#         'group': {
#             'source_filenames': (
#                 'scripts/*.js',
#             ),
#             'output_filename': 'scripts/main.js',
#         }
#     }
# }

# API Configuration

TASTYPIE_ALLOW_MISSING_SLASH = True
TASTYPIE_DEFAULT_FORMATS = ['json', 'jsonp']
THROTTLE_TIMEOUT = 150
TASTYPIE_API_VERSION = 'v1'

KONG_ADMIN_URL = 'http://localhost:8001'
KONG_ADMIN_SIMULATOR = False

JET_DEFAULT_THEME = 'light-gray'
JET_SIDE_MENU_COMPACT = True
JET_THEMES = []

# Logs
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format':
            "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/files.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'propagate': True,
            'filename': 'logs/django.log',
            'level': 'DEBUG',
        },
        'subdomains': {
            'handlers': ['file'],
            'filename': 'logs/subdomains.log',
            'level': 'DEBUG',
        },
        'tenant_schemas': {
            'handlers': ['file'],
            'filename': 'logs/tenants.log',
            'level': 'DEBUG',
        },
    }
}
